patient[patient.P_name == "harini"]
patient[patient$P_name == "harini"]
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21", P_class = factor("benign"))
saveRDS(patient , "C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
readRDS("C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(patient)
patient <- readRDS("C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
patient[patient$P_name == "tarry"]
patient$P_name == "tarry"
patient[, patient$P_name == "tarry"]
patient[, (patient$P_name == "tarry")]
patient.rowname = "P_name"
patient(`row.names<- P_name)
patient(`row.names<- P_name)
patient(`row.names<-.data.frame`(P_name))
patient(row.names(patient$P_name))
patient
patient(row.names(P_name))
patient(row.names(patient.P_name))
patient.rowname
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21", P_class = factor("benign"),row.names = 'P_name')
patient
saveRDS(patient , "C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
readRDS("C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21", P_class = factor("benign"),row.names = patient$P_name)
patient
patient["harini"]
patient["harini" ,]
saveRDS(patient , "C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
readRDS("C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
runApp()
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21", P_class = factor("benign"),row.names = patient$P_name)
saveRDS(patient , "C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
readRDS("C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
rm(patient)
runApp()
runApp()
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21", P_class = factor("benign"))
row.names(patient) <- patient$P_name
patient
saveRDS(patient , "C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
readRDS("C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
runApp()
runApp()
runApp()
runApp()
save.image("rb.RData")
load("~/R/firstWebApp/rb.RData")
shiny::runApp()
runApp()
runApp()
str(BreastCancer)
feature <- c(input$cl_thickness , input$cell_size , input$cell_shape , input$marg_adhesion ,
input$epith_C_size , input$bare_nuclei , input$bl_cromatin ,
input$normal_nucleoli , input$mitoses)
feature <- c(1 , 4 , 5 , 2 ,
2 , 3 , 3 ,
1 , 1)
mod <- readRDS("Bmod.rds")
test <- predict(mod, feature)
mod
summary(mod)
readRDS("Bmod.rds")
mod2 <- readRDS("Bmod.rds")
mod <- function(){
library(mlbench)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
data("BreastCancer")
#removing missing value using decision trees
training_age <- BreastCancer[!is.na(BreastCancer$Bare.nuclei) ,]
model <- rpart( Bare.nuclei ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Class, data = training_age , method = "class")
BreastCancer$Bare.nuclei[is.na(BreastCancer$Bare.nuclei)] <- predict(model , BreastCancer[is.na(BreastCancer$Bare.nuclei) ,] , type = "class")
#create training and testing data
data <- createDataPartition(y = BreastCancer$Class , p = 0.75 , list = FALSE)
train <- BreastCancer[data ,]
test <- BreastCancer[-data ,]
#training using randomforest
# set.seed(7)
final_random <-  randomForest(Class ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Bare.nuclei , data = train , ntree = 100)
saveRDS(final_random, file = "Bmod.rds",compress = FALSE)
#test_new_ran <- test
#test_new_ran$Class <- NA
#test_new_ran$Class <- predict(final_random , test_new)
}
View(mod)
mod()
mod2 <- readRDS("Bmod.rds")
mod2
mod()
feature <- c(input$cl_thickness , input$cell_size , input$cell_shape , input$marg_adhesion ,
input$epith_C_size , input$bare_nuclei , input$bl_cromatin ,
input$normal_nucleoli , input$mitoses)
feature <- c(1 , 4 , 5 , 2 ,
2 , 3 , 3 ,
1 , 1)
mod <- readRDS("Bmod.rds")
readRDS("Bmod.rds")
mod1 <- readRDS("Bmod.rds")
mod1
predict(mod1 , feature)
feature <- list(c(1 , 4 , 5 , 2 ,
2 , 3 , 3 ,
1 , 1 ),)
feature <- data.frame(c(1 , 4 , 5 , 2 ,
+              2 , 3 , 3 ,
+              1 , 1 ))
feature <- data.frame(Cl.thickness = 1 , Cell.size = 1 , Marg.adhesion = 1 ,Epith.c.size = 2 , Bl.cromatin = 2 , Normal.nucleoli = 3 , Mitoses = 1 , Bare.nuclei = 1)
predict(mod1 , feature)
feature$Class <- NA
predict(mod1 , feature)
feature$Class <- NA
feature <- data.frame(id = 1000233 ,Cl.thickness = 1 , Cell.size = 1 , Marg.adhesion = 1 ,Epith.c.size = 2 , Bl.cromatin = 2 , Normal.nucleoli = 3 , Mitoses = 1 , Bare.nuclei = 1)
feature$Class <- NA
View(feature)
feature <- data.frame(id = 1000233 ,Cl.thickness = 1 , Cell.size = 1 ,Cell.shape = 1 , Marg.adhesion = 1 ,Epith.c.size = 2 , Bl.cromatin = 2 , Normal.nucleoli = 3 , Mitoses = 1 , Bare.nuclei = 1)
feature$Class <- NA
predict(mod1 , feature)
feature$Class <- predict(mod1 , feature)
library(mlbench)
library(caret)
library(rpart)
library(rpart.plot)
library(kernlab)
library(randomForest)
data("BreastCancer")
#removing missing value using decision trees
training_age <- BreastCancer[!is.na(BreastCancer$Bare.nuclei) ,]
model <- rpart( Bare.nuclei ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Class, data = training_age , method = "class")
BreastCancer$Bare.nuclei[is.na(BreastCancer$Bare.nuclei)] <- predict(model , BreastCancer[is.na(BreastCancer$Bare.nuclei) ,] , type = "class")
#create training and testing data
data <- createDataPartition(y = BreastCancer$Class , p = 0.75 , list = FALSE)
train <- BreastCancer[data ,]
test <- BreastCancer[-data ,]
control <- trainControl(method = "repeatedcv" , number = 10 , repeats = 10 , savePredictions = FALSE)
#training using svm radial
set.seed(7)
final_train <- train(Class ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Bare.nuclei  , data = train , trControl = control , method = "svmRadial")
test_new <- test
test_new$Class <- NA
test_new$Class <- predict(final_train , test_new)
text_new$class
warnings()
final_bayesian <-train(Class ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Bare.nuclei  , data = train , trControl = control , method = "nb")
control <- trainControl(method = "repeatedcv" , number = 10 , repeats = 10 , savePredictions = FALSE)
set.seed(7)
final_train <- train(Class ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Bare.nuclei  , data = train , trControl = control , method = "svmRadial")
set.seed(7)
final_random <-  randomForest(Class ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Bare.nuclei , data = train , ntree = 100)
test_new_ran <- test
test_new_ran$Class <- NA
test_new_ran$Class <- predict(final_random , test_new)
test_new_ran$Class
library(mlbench)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
data("BreastCancer")
#removing missing value using decision trees
training_age <- BreastCancer[!is.na(BreastCancer$Bare.nuclei) ,]
model <- rpart( Bare.nuclei ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Class, data = training_age , method = "class")
BreastCancer$Bare.nuclei[is.na(BreastCancer$Bare.nuclei)] <- predict(model , BreastCancer[is.na(BreastCancer$Bare.nuclei) ,] , type = "class")
#create training and testing data
data <- createDataPartition(y = BreastCancer$Class , p = 0.75 , list = FALSE)
train <- BreastCancer[data ,]
test <- BreastCancer[-data ,]
#training using randomforest
# set.seed(7)
final_random <-  randomForest(Class ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Bare.nuclei , data = train , ntree = 100)
saveRDS(final_random, file = "Bmod.rds",compress = FALSE)
readRDS("Bmod.rds")
mod <- readRDS("Bmod.rds")
View(test)
feature <- data.frame(Id = 1000233 ,Cl.thickness = 1 , Cell.size = 1 , Marg.adhesion = 1 ,Epith.c.size = 2 ,, Bare.nuclei = 1, Bl.cromatin = 2 , Normal.nucleoli = 3 , Mitoses = 1 , Class = NA)
feature <- data.frame(Id = 1000233 ,Cl.thickness = 1 , Cell.size = 1 , Marg.adhesion = 1 ,Epith.c.size = 2 , Bare.nuclei = 1, Bl.cromatin = 2 , Normal.nucleoli = 3 , Mitoses = 1 , Class = NA)
test_new_ran <- test
test_new_ran$Class <- NA
test_new_ran$Class <- predict(final_random , test_new)
View(test_new_ran)
test_new_ran$Class <- predict(final_random , test_new)
test_new_ran$Class <- predict(final_random , test_new_ran)
feature$Class <- predict(final_random , feature)
feature <- data.frame(Id = 1000233 ,Cl.thickness = 1 , Cell.size = 1 , Marg.adhesion = 1 ,Epith.c.size = 2 ,, Bare.nuclei = 1, Bl.cromatin = 2 , Normal.nucleoli = 3 , Mitoses = 1 )
feature <- data.frame(Id = 1000233 ,Cl.thickness = 1 , Cell.size = 1 , Marg.adhesion = 1 ,Epith.c.size = 2 , Bare.nuclei = 1, Bl.cromatin = 2 , Normal.nucleoli = 3 , Mitoses = 1 )
feature$Class <- NA
feature <- data.frame(Id = 1000233 ,Cl.thickness = 1 , Cell.size = 1 ,Cell,shape = 1 , Marg.adhesion = 1 ,Epith.c.size = 2 , Bare.nuclei = 1, Bl.cromatin = 2 , Normal.nucleoli = 3 , Mitoses = 1 )
feature <- data.frame(Id = 1000233 ,Cl.thickness = 1 , Cell.size = 1 ,Cell.shape = 1 , Marg.adhesion = 1 ,Epith.c.size = 2 , Bare.nuclei = 1, Bl.cromatin = 2 , Normal.nucleoli = 3 , Mitoses = 1 )
feature$Class <- NA
feature$Class <- predict(final_random , feature)
predict(final_random , feature)
View(test_new_ran)
View(feature)
feature <- data.frame(Id = 10002955 ,Cl.thickness = 1 , Cell.size = 1 ,Cell.shape = 1 , Marg.adhesion = 1 ,Epith.c.size = 2 , Bare.nuclei = 1, Bl.cromatin = 2 , Normal.nucleoli = 3 , Mitoses = 1 )
str(factor)
str(feature)
temp <- factor(1)
temp
feature <- data.frame(Id = 10002955 ,Cl.thickness = factor(1) , Cell.size = factor(2) ,Cell.shape = factor(1) , Marg.adhesion = factor(1) ,Epith.c.size = factor(2) , Bare.nuclei = factor(3), Bl.cromatin = factor(3) , Normal.nucleoli = factor(5) , Mitoses = factor(4)  )
feature$Class <- NA
predict(final_random , feature)
str(feature)
tts <- predict(final_random , feature)
tts <- predict(final_random , test_new_ran)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
feature <- list(Id = "333",
Cl.thickness = factor(input$cl_thickness , levels = c(1,2,3,4,5,6,7,8,9,10)),
Cell.size = factor(input$cell_size , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
Cell.shape = factor(input$cell_shape , levels = c(1,2,3,4,5,6,7,8,9,10)),
Marg.adhesion = factor(input$marg_adhesion , levels = c(1,2,3,4,5,6,7,8,9,10)),
Epith.c.size = factor(input$epith_c_size, levels = c(1,2,3,4,5,6,7,8,9,10)),
Bare.nuclei = factor(input$bare_nuclei , levels = c(1,2,3,4,5,6,7,8,9,10)),
Bl.cromatin = factor(input$bl_cromatin , levels = c(1,2,3,4,5,6,7,8,9,10)),
Normal.nucleoli = factor(input$normal_nucleoli , levels = c(1,2,3,4,5,6,7,8,9,10)),
Mitoses = factor(input$mitoses ,levels = c(1,2,3,4,5,6,7,8,9)),
Class = factor(NA , levels = c("benign" ,"malignant"))
)
feature <- list(Id = "333",
Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Marg.adhesion = factor(input$5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)),
Class = factor(NA , levels = c("benign" ,"malignant")))
feature <- list(Id = "333",
Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)),
Class = factor(NA , levels = c("benign" ,"malignant")))
predict(final_random , feature)
str(test_new_ran)
str(test_new_ran$Class)
summary(test_new_ran$Class)
feature <- list(Id = "333",
Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)),
Class = NA)))
feature <- list(Id = "333",
Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)),
Class = NA))
feature <- list(Id = "333",
Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)),
Class = NA)
predict(final_random , feature)
feature <- data.frame(Id = "333",
Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)),
Class = NA)
View(feature)
View(test_new_ran)
feature <- data.frame(Id = as.character(333),
Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)),
Class = NA)
View(feature)
feature <- data.frame(Id = as.character("hello"),
Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)),
Class = NA , stringsAsFactors = FALSE)
View(feature)
predict(final_random , feature)
feature <- data.frame(Id = as.character("hello"),
Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)),
Class =  , stringsAsFactors = FALSE)
rm(test_new_ran$Class)
test_new_ran <- test
test_new_ran$Class <- NA
View(test_new_ran)
predict(final_random , test_new_ran)
predict(final_random , feature)
feature <- data.frame(Id = as.character(333),
feature <- data.frame(Id = "100221",
Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)),
Class =  NA, stringsAsFactors = FALSE)
mod <- readRDS("Bmod.rds")
mod
predict(mod , feature)
str(feature)
feature <- data.frame(Id = as.character(333),
Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)),
)
feature <- data.frame(Id = as.character(333),
+ Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
+ Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)
feature <- data.frame(Id = as.character(333),
+ Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
+ Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)))
feature <- data.frame(Id = as.character(333),
+ Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
+ Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9))
feature <- data.frame(Id = as.character(333),
+ Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,
+ Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),
+ Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)))
feature <- data.frame(Id = as.character(333), Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)), Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)), Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)))
predict(mod , feature)
library(mlbench)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
data("BreastCancer")
#removing missing value using decision trees
training_age <- BreastCancer[!is.na(BreastCancer$Bare.nuclei) ,]
model <- rpart( Bare.nuclei ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Class, data = training_age , method = "class")
BreastCancer$Bare.nuclei[is.na(BreastCancer$Bare.nuclei)] <- predict(model , BreastCancer[is.na(BreastCancer$Bare.nuclei) ,] , type = "class")
#create training and testing data
data <- createDataPartition(y = BreastCancer$Class , p = 0.75 , list = FALSE)
train <- BreastCancer[data ,]
test <- BreastCancer[-data ,]
#training using randomforest
# set.seed(7)
final_random <-  randomForest(Class ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Bare.nuclei , data = train , ntree = 100)
saveRDS(final_random, file = "Bmod.rds",compress = FALSE)
View(train)
feature <- data.frame(Id = as.character(333), Cl.thickness = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)), Cell.size = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)) ,Cell.shape = factor(3 , levels = c(1,2,3,4,5,6,7,8,9,10)),Marg.adhesion = factor(5 , levels = c(1,2,3,4,5,6,7,8,9,10)),Epith.c.size = factor(2, levels = c(1,2,3,4,5,6,7,8,9,10)),Bare.nuclei = factor(1 , levels = c(1,2,3,4,5,6,7,8,9,10)),Bl.cromatin = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)), Normal.nucleoli = factor(2 , levels = c(1,2,3,4,5,6,7,8,9,10)),Mitoses = factor(1 ,levels = c(1,2,3,4,5,6,7,8,9)),stringsAsFactors = FALSE)
feature
str(feature)
predict(final_random , feature)
control <- trainControl(method = "repeatedcv" , number = 10 , repeats = 10 , savePredictions = FALSE)
final_bayesian <-train(Class ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Bare.nuclei  , data = train , trControl = control , method = "nb")
final_random <-  randomForest(Class ~ Cl.thickness + Cell.size + Marg.adhesion + Epith.c.size + Bl.cromatin + Normal.nucleoli + Mitoses + Bare.nuclei , data = train , ntree = 100)
test_new_ran <- test
test_new_ran$Class <- NA
predict(final_bayesian , test_new_ran)
predict(final_bayesian , feature)
saveRDS("bay.rds")
saveRDS(final_bayesian , "bay.rds")
readRDS("bay.rds")
runApp()
summary(final_bayesian)
str(final_bayesian)
runApp()
runApp()
runApp()
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21")
saveRDS(patient , "C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
readRDS("C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
runApp()
runApp()
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21")
rownames(patient) <- patient$P_name
saveRDS(patient , "C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
readRDS("C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
runApp()
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21",P_class = "")
rownames(patient) <- patient$P_name
saveRDS(patient , "C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
readRDS("C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
runApp()
runApp()
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21",P_class = factor(x=character(0),levels = c("malignant", "benign")))
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21",P_class = factor(x=character(),levels = c("malignant", "benign")))
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21",P_class = factor(x=NA,levels = c("malignant", "benign")))
rownames(patient) <- patient$P_name
saveRDS(patient , "C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
readRDS("C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
runApp()
readRDS("patient.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21",P_class = factor(x=NA,levels = c("malignant", "benign")))
rownames(patient) <- patient$P_name
saveRDS(patient , "C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
readRDS("C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
runApp()
runApp()
runApp()
runApp()
patient <- data.frame(P_name="harini" , P_age = 25 ,P_id=" i21",P_class = factor(x=NA,levels = c("malignant", "benign")))
rownames(patient) <- patient$P_name
saveRDS(patient , "C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
readRDS("C:/Users/lakshmi1/Documents/R/firstWebApp/patient.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
save.image("rb.RData")
